services:
  ddns:
    image: timothyjmiller/cloudflare-ddns:latest
    container_name: ddns
    security_opt:
      - no-new-privileges:true
    network_mode: 'host'
    environment:
      - PUID=1000
      - PGID=1000
    volumes:
      - ./config.ddns.json:/config.json:ro
    restart: unless-stopped
  ofelia:
    image: mcuadros/ofelia:latest
    container_name: ofelia
    command: daemon --docker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      ofelia.job-local.ofelia-alive.schedule: "@every 5m"
      ofelia.job-local.ofelia-alive.command: "date"
      traefik.enable: false
    networks:
      - proxy
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    labels:
      - traefik.enable=true
      - traefik.http.routers.prometheus.rule=Host(`${PROMETHEUS_DOMAIN}`)
      - traefik.http.services.prometheus.loadbalancer.server.port=9090
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.config.file=/etc/prometheus/web-config.yml'
    volumes:
      - "./prometheus.yml:/etc/prometheus/prometheus.yml"
      - "./web-config.yml:/etc/prometheus/web-config.yml"
    networks:
      - proxy
  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.grafana.rule=Host(`${GRAFANA_DOMAIN}`)
      - traefik.http.services.grafana.loadbalancer.server.port=3000
    volumes:
      - 'grafana_storage:/var/lib/grafana'
    networks:
      - proxy
  traefik:
    image: traefik:latest
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    ports:
      # listen on host ports without ingress network
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
    networks:
      - proxy
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./certs:/letsencrypt
    command:
      - --api.dashboard=true
      - --log.level=DEBUG
      - --accesslog=true
      - --providers.docker.network=web
      - --providers.docker.exposedByDefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entryPoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.asDefault=true
      # Set up LetsEncrypt certificate resolver
      - --certificatesresolvers.letsencrypt.acme.dnschallenge=true
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare
      - --certificatesResolvers.letsencrypt.acme.dnschallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.letsencrypt.acme.dnschallenge.delayBeforeCheck=20
      - --certificatesresolvers.letsencrypt.acme.email=${CERT_MAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      # staging environment of LE, remove for real certs
      - --certificatesresolvers.letsencrypt.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
      # Set up the TLS configuration for our websecure listener
      - --entrypoints.websecure.http.tls=true
      - --entrypoints.websecure.http.tls.certResolver=letsencrypt
      - --entrypoints.websecure.http.tls.domains[0].main=${MAIN_DOMAIN}
      - --entrypoints.websecure.http.tls.domains[0].sans=${SANS_DOMAIN}
    labels:
      - traefik.enable=${DASHBOARD_ENABLED}
      - traefik.http.routers.dashboard.rule=Host(`${DASHBOARD_DOMAIN}`)
      - traefik.http.routers.dashboard.service=api@internal
      - traefik.http.routers.dashboard.middlewares=myauth
      - traefik.http.middlewares.myauth.basicauth.users=${BASIC_AUTH_USER}:${BASIC_AUTH_PASS}
    environment:
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN}
      - CF_API_EMAIL=${CF_API_EMAIL}

  whoami:
    image: traefik/whoami:latest
    container_name: whoami
    networks:
      - proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.mywhoami.rule=Host(`${WHOAMI_DOMAIN}`)
      - traefik.http.services.mywhoami.loadbalancer.server.port=80

  planka:
    image: ghcr.io/plankanban/${PLANKA_IMAGE}
    restart: on-failure
    container_name: planka
    networks:
      - proxy
    volumes:
      - favicons:/app/public/favicons
      - user-avatars:/app/public/user-avatars
      - background-images:/app/public/background-images
      - attachments:/app/private/attachments
    environment:
      - BASE_URL=https://${PLANKA_DOMAIN}
      - DATABASE_URL=postgresql://${PLANKA_DB_USER}:${PLANKA_DB_PASSWORD}@postgres/${PLANKA_DB_NAME}
      - SECRET_KEY=${PLANKA_SECRET_KEY}
    depends_on:
      postgres:
        condition: service_healthy
    labels:
      - traefik.enable=true
      - traefik.http.routers.planka.rule=Host(`${PLANKA_DOMAIN}`)
      - traefik.http.services.planka.loadbalancer.server.port=1337

  postgres:
    image: postgres:16-alpine
    restart: on-failure
    container_name: planka-postgres
    networks:
      - proxy
    volumes:
      - db-data-planka:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${PLANKA_DB_NAME}
      - POSTGRES_USER=${PLANKA_DB_USER}
      - POSTGRES_PASSWORD=${PLANKA_DB_PASSWORD}
      - POSTGRES_HOST_AUTH_METHOD=trust
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PLANKA_DB_USER} -d ${PLANKA_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  proxy:
    name: proxy
    external: true

volumes:
  grafana_storage: {}
  favicons:
  user-avatars:
  background-images:
  attachments:
  db-data-planka: